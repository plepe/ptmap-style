/* Draw all tram routes in red */
@import url('route-types.mapcss');
@import url('priority.mapcss');
@import url('stop-types.mapcss');

/* For every route iterate over all members to save their 'ref' tag
   to the child tag 'ref_list' */
relation.type >[role@=';forward;backward'] way {
  set ref_list = eval(append(tag(ref_list), parent_tag(ref)));
  set .priority_list = append(tag('.priority_list'), parent_tag('.priority'));
  color: parent_tag('color');
  set .type = parent_tag('.type');
  set color = parent_tag('color');
}

/* Remove duplicate refs from list, sort the list. Combine all lines
   with the same combination of routes into a new type 'tram_routes'. */
way.type {
  set ref_list = eval(sort(unique(tag(ref_list))));
  width: cond(contains(tag('.priority_list'), 2), 2, 1);
  combine routes eval(tag('.type') . '|' . tag(ref_list));
}

/* Render the tram_routes from the statement before. "Line Merge" the
   geometry for nicer label placement. Sort the refs "naturally" and
   merge with a colon. Repeat labels every ~128px. */
routes::label {
  geo: eval(line_merge(prop(geo)));
  text: eval(join(', ', natsort(tag(ref_list))));
  text-color: tag('color');
  text-halo-color: #ffffff;
  text-halo-radius: 1;
  text-position: line;
  text-spacing: 128;
  z-index: 3;
}
