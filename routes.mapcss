/* Draw all tram routes in red */
@import url('route-types.mapcss');
@import url('priority.mapcss');

/* For every route iterate over all members to save their 'ref' tag
   to the child tag 'ref_list' */
relation.type way {
  set ref_list = eval(append(tag(ref_list), parent_tag(ref)));
  set .priority_list = append(tag('.priority_list'), parent_tag('.priority'));
  color: parent_tag('color');
  set .type = parent_tag('.type');
  set color = parent_tag('color');
}

/* Remove duplicate refs from list, sort the list. Combine all lines
   with the same combination of routes into a new type 'tram_routes'. */
way.type {
  set ref_list = eval(sort(unique(tag(ref_list))));
  width: cond(contains(tag('.priority_list'), 2), 2, 1);
  combine routes eval(tag('.type') . '|' . tag(ref_list));
}

/* Render the tram_routes from the statement before. "Line Merge" the
   geometry for nicer label placement. Sort the refs "naturally" and
   merge with a colon. Repeat labels every ~128px. */
routes::label {
  geo: eval(line_merge(prop(geo)));
  text: eval(join(', ', natsort(tag(ref_list))));
  text-color: tag('color');
  text-halo-color: #ffffff;
  text-halo-radius: 1;
  text-position: line;
  text-spacing: 128;
  z-index: 3;
}

/* Find all tram stops on the map and combine them (with the same name - only
   if they have a name) to the new type 'tram_stop'. */
node|z14-[railway=tram_stop][name] {
  combine tram_stop eval(tag(name));
}

/* Build a polygon (a "convex hull") from all the tram stop nodes and
   draw a buffer of 7px around them. */
tram_stop {
  geo: eval(buffer(convex_hull(prop(geo)), 7px));
  fill-color: #a0a0a07f;
  width: 1;
  color: #a0a0a0af;
  z-index: 1;
}

/* Print the stop name on the polygon from the geometry of the "default"
   pseudo element (the statement above) */
tram_stop::label {
  geo: eval(prop(geo, default));
  text: eval(tag(name));
  z-index: 2;
}
